- name: Install Runtime Docker CE
  include_role:
    name: install-docker
  vars:
    docker_version: '18.09'

- name: Install packages repository
  shell:
    cmd: |
      set -o pipefail
      set -ex
      # Installing kubeadm, kubelet and kubectl.
      apt-get update && apt-get install -y apt-transport-https curl
      curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

      cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
      deb https://apt.kubernetes.io/ kubernetes-$(lsb_release -cs) main
      EOF
      apt-get update
    executable: /bin/bash

- name: Deploy k8s master
  when: '"master" in k8s_role_to_deploy'
  shell: |
    set -o pipefail
    set -ex
    if [[ "{{ kubernetes_version }}" == "latest" ]]; then
        apt-get install -y kubelet kubeadm kubectl
    else
        install_version=$(apt-cache madison kubelet |grep "{{ kubernetes_version }}" | head -n 1 | awk '{print $3}')
        apt-get install -y kubelet=$install_version kubeadm=$install_version kubectl=$install_version
    fi
    kubelet --version
    apt-mark hold kubelet kubeadm kubectl

    # Creating a single master cluster with kubeadm:
    ## to avoid coredns crashloopbackoff, we set nameserver to 8.8.8.8 instead of 127.0.0.1
    cat /etc/resolv.conf
    sed -i 's/nameserver 127.0.0.1/nameserver 8.8.8.8/' /etc/resolv.conf
    cat /etc/resolv.conf

    sysctl net.bridge.bridge-nf-call-iptables=1
    if [[ -f /etc/kubernetes/kubeadm.yaml ]]; then
      kubeadm init --config=/etc/kubernetes/kubeadm.yaml
    else
      kubeadm init --pod-network-cidr=10.244.0.0/16 --kubernetes-version="{{ kubernetes_version }}" \
          --node-name "{{ inventory_hostname }}"
    fi
    mkdir -p $HOME/.kube
    sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config

    # Installing a pod network add-on.
    if [[ {{ network_addon }} == "flannel" ]]; then
      kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/023dc119c068d94590b2040d6550ff5ecfa190da/Documentation/kube-flannel.yml
    elif [[ {{ network_addon }} == "calico" ]]; then
      kubectl apply -f https://docs.projectcalico.org/v3.14/manifests/calico.yaml
    fi

    # make sure we can schedule pods on the master.
    kubectl taint nodes --all node-role.kubernetes.io/master-
  args:
    executable: /bin/bash

- name: Deploy k8s node
  when: '"node" in k8s_role_to_deploy'
  shell: |
    set -o pipefail
    set -ex
    if [[ "{{ kubernetes_version }}" == "latest" ]]; then
        apt-get install -y kubelet kubeadm kubectl
    else
        install_version=$(apt-cache madison kubelet |grep "{{ kubernetes_version }}" | head -n 1 | awk '{print $3}')
        apt-get install -y kubelet=$install_version kubeadm=$install_version kubectl=$install_version
    fi
    kubelet --version
    apt-mark hold kubelet kubeadm kubectl
    {{ kubeadm_join_cmd }} --node-name "{{ inventory_hostname }}"
    # for NFS pvc
    apt-get install -y nfs-common
  args:
    executable: /bin/bash
