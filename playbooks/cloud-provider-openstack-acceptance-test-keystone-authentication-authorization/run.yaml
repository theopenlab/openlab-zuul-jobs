- hosts: all
  become: yes

  roles:
    - role: config-golang
      go_version: '1.15.11'
    - install-docker
    - clone-devstack-gate-to-workspace
    - role: install-devstack
      environment:
        OVERRIDE_ENABLED_SERVICES: 'key,mysql'

  tasks:
    - name: Install python 3
      raw: test -e /usr/bin/python3 || (apt -y update && apt install -y python3-minimal)

    - name: Install packages
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - python3-pip
          - jq

    - name: Install pypi libraries
      pip:
        name: "{{ libraries }}"
      vars:
        libraries:
          - python-openstackclient
          - httpie

    - name: Prepare base alpine image
      shell:
         cmd: |
           docker login -u ap-southeast-3@{{ swr.ak }} -p {{ swr.sk }} swr.ap-southeast-3.myhuaweicloud.com
           docker pull swr.ap-southeast-3.myhuaweicloud.com/openlab/alpine:3.11
           docker tag swr.ap-southeast-3.myhuaweicloud.com/openlab/alpine:3.11 alpine:3.11
           docker logout swr.ap-southeast-3.myhuaweicloud.com
      no_log: yes

    - name: Uninstall k3s if it is deployed
      shell:
        executable: /bin/bash
        removes: /usr/local/bin/k3s-uninstall.sh
        cmd: |
          set -ex
          /usr/local/bin/k3s-uninstall.sh

    - name: Air-gap deploy k3s
      shell:
        executable: /bin/bash
        creates: /etc/rancher/k3s/k3s.yaml
        cmd: |
          set -ex

          keystone_auth_conf={{ ansible_user_dir }}/keystone-auth
          mkdir -p ${keystone_auth_conf}
          cat <<EOF > ${keystone_auth_conf}/webhookconfig.yaml
          ---
          apiVersion: v1
          kind: Config
          preferences: {}
          clusters:
            - cluster:
                insecure-skip-tls-verify: true
                server: https://localhost:8443/webhook
              name: webhook
          users:
            - name: webhook
          contexts:
            - context:
                cluster: webhook
                user: webhook
              name: webhook
          current-context: webhook
          EOF

          # Use branch variable directly will cause ansible parsing error.
          branch={{ zuul.branch }}
          if [[ "$branch" = "master" ]]; then
            k3s_release=$(curl -s "https://api.github.com/repos/k3s-io/k3s/releases/latest" | grep '"tag_name":' | awk -F '"' '{print $4}')
          else
            # e.g. release-1.21 --> 1.21
            k8s_minor=${branch##*-}
            # e.g. 1.21 --> v1.21.3
            k8s_version=$(curl -s "https://api.github.com/repos/kubernetes/kubernetes/tags" | jq -r '.[].name' | grep -E "^v${k8s_minor}.[0-9]$")
            # e.g. v1.21.3 --> v1.21.3+k3s1
            k3s_release="${k8s_version}+k3s1"
          fi

          mkdir -p /var/lib/rancher/k3s/agent/images/
          curl -sSL https://github.com/k3s-io/k3s/releases/download/${k3s_release}/k3s-airgap-images-amd64.tar -o /var/lib/rancher/k3s/agent/images/k3s-airgap-images.tar
          curl -sSL https://github.com/k3s-io/k3s/releases/download/${k3s_release}/k3s -o /usr/local/bin/k3s
          curl -sSL https://get.k3s.io -o /var/lib/rancher/k3s/install.sh
          chmod u+x /var/lib/rancher/k3s/install.sh /usr/local/bin/k3s

          INSTALL_K3S_SKIP_DOWNLOAD=true /var/lib/rancher/k3s/install.sh \
            --kube-apiserver-arg="authentication-token-webhook-config-file=${keystone_auth_conf}/webhookconfig.yaml" \
            --kube-apiserver-arg="authorization-webhook-config-file=${keystone_auth_conf}/webhookconfig.yaml" \
            --kube-apiserver-arg="authorization-mode=Node,RBAC,Webhook"

    - name: Wait for node ready
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
      shell:
        executable: /bin/bash
        cmd: |
          kubectl get node
      register: result
      until: '" Ready "  in result.stdout'
      retries: 5
      delay: 10

    - name: Deploy config maps for k8s-keystone-auth
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
      shell:
        executable: /bin/bash
        cmd: |
          set -ex

          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: keystone-auth-policy
            namespace: kube-system
          data:
            policies: |
              [
                {
                  "users": {
                    "projects": ["demo"],
                    "roles": ["member"]
                  },
                  "resource_permissions": {
                    "default/pods": ["get", "list"]
                  }
                }
              ]
          EOF

          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: keystone-sync-policy
            namespace: kube-system
          data:
            syncConfig: |
              role-mappings:
                - keystone-role: member
                  groups: ["member"]
          EOF

    # global_env is needed to make sure go binary is in the PATH.
    - name: Build k8s-keystone-auth binary
      environment: "{{ global_env }}"
      shell:
        executable: /bin/bash
        chdir: '{{ k8s_os_provider_src_dir }}'
        cmd: |
          set -ex

          export ARCH=${ARCH:-amd64}
          export BUILD_CMDS='k8s-keystone-auth'
          make build

    # global_env is needed to access openstack credentials.
    - name: Deploy k8s-keystone-auth
      environment: "{{ global_env }}"
      shell:
        creates: "{{ k8s_log_dir }}/keystone-auth.log"
        executable: /bin/bash
        chdir: "{{ k8s_os_provider_src_dir }}"
        cmd: |
          set -ex

          mkdir -p {{ k8s_log_dir }}
          export LOG_DIR={{ k8s_log_dir }}
          keystone_auth_conf={{ ansible_user_dir }}/keystone-auth

          [ ! -f ${keystone_auth_conf}/ca.crt ] && openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ${keystone_auth_conf}/ca.key -out ${keystone_auth_conf}/ca.crt -subj "/CN=keystone-auth"

          keystone_auth_url=${OS_AUTH_URL}/v3
          nohup ./k8s-keystone-auth \
                --tls-cert-file ${keystone_auth_conf}/ca.crt \
                --tls-private-key-file ${keystone_auth_conf}/ca.key \
                --policy-configmap-name keystone-auth-policy \
                --sync-configmap-name keystone-sync-policy \
                --log-dir=${LOG_DIR} \
                --v=2 \
                --kubeconfig /etc/rancher/k3s/k3s.yaml \
                --keystone-url ${keystone_auth_url} >"${LOG_DIR}/keystone-auth.log" 2>&1 &

    - name: Send request to k8s-keystone-auth - DEBUG
      shell:
        executable: /bin/bash
        cmd: |
          set -e
          sleep 14400

          source /opt/stack/new/devstack/openrc demo demo > /dev/null
          token=$(openstack token issue -f yaml -c id | awk '{print $2}')
          cat <<EOF | http -b --verify no post https://localhost:8443/webhook
          {
            "apiVersion": "authentication.k8s.io/v1beta1",
            "kind": "TokenReview",
            "metadata": {
              "creationTimestamp": null
            },
            "spec": {
              "token": "$token"
            }
          }
          EOF

    # Restart k3s will reset /etc/rancher/k3s/k3s.yaml
    - name: Restart k3s service
      ansible.builtin.systemd:
        state: restarted
        name: k3s

    - name: Get kubeconfig contexts
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
      shell:
        executable: /bin/bash
        cmd: |
          kubectl config get-contexts --no-headers=true -o name
      register: contexts_ret

    - name: Config openstack user in kubeconfig
      when: '"openstack" not in contexts_ret.stdout_lines'
      blockinfile:
        path: /etc/rancher/k3s/k3s.yaml
        insertafter: "users:"
        block: |
          - name: openstackuser
            user:
              exec:
                command: /bin/bash
                apiVersion: client.authentication.k8s.io/v1beta1
                args:
                - -c
                - >
                  if [ -z ${OS_TOKEN} ]; then
                      echo 'Error: Missing OpenStack credential from environment variable $OS_TOKEN' > /dev/stderr
                      exit 1
                  else
                      echo '{ "apiVersion": "client.authentication.k8s.io/v1beta1", "kind": "ExecCredential", "status": { "token": "'"${OS_TOKEN}"'"}}'
                  fi

    - name: Config openstack context in kubeconfig
      when: '"openstack" not in contexts_ret.stdout_lines'
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
      shell:
        executable: /bin/bash
        cmd: |
          set -ex

          kubectl config set-context --cluster=default --user=openstackuser openstack

    - name: Run e2e tests for k8s-keystone-auth webhook
      shell:
        executable: /bin/bash
        chdir: '{{ k8s_os_provider_src_dir }}'
        cmd: |
          set -e

          source /opt/stack/new/devstack/openrc demo demo > /dev/null
          # The default Keystone token expiration time in devstack is 3 hours.
          token=$(openstack token issue -f yaml -c id | awk '{print $2}')
          export OS_TOKEN=$token
          export KUBECONFIG=/etc/rancher/k3s/k3s.yaml

          OS_TOKEN=$token OS_CONTEXT_NAME=openstack AUTH_POLICY_CONFIGMAP=keystone-auth-policy ROLE_MAPPING_CONFIGMAP=keystone-sync-policy tests/e2e/k8s-keystone-auth/test-authz.sh
