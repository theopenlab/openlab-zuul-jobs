- hosts: all
  roles:
    - config-golang
    - install-k8s
    - clone-devstack-gate-to-workspace
    - role: install-devstack
      environment:
        OVERRIDE_ENABLED_SERVICES: 'key,mysql'
  become: yes
  tasks:
    - name: Run keystone authentication and authorization acceptance tests with cloud-provider-openstack
      shell:
        cmd: |
          set -x
          set -e
          set -o pipefail

          # Build cloud-provider-openstack binaries
          make build

          apt-get install python-pip -y
          pip install -U python-openstackclient

          # Create cloud-config
          mkdir -p /etc/kubernetes/
          cat << EOF >> /etc/kubernetes/cloud-config
          [Global]
          domain-id = $OS_PROJECT_DOMAIN_ID
          tenant-name = $OS_PROJECT_NAME
          auth-url = $OS_AUTH_URL
          password = $OS_PASSWORD
          username = $OS_USERNAME
          region = $OS_REGION_NAME

          [BlockStorage]
          bs-version = v3
          ignore-volume-az = yes
          EOF

          cp ./examples/webhook/policy.json /etc/kubernetes/
          sed -i "s/c1f7910086964990847dc6c8b128f63c/$OS_PROJECT_NAME/g" /etc/kubernetes/policy.json
          sed -i -e "s/k8s-admin/admin/g" /etc/kubernetes/policy.json

          # Create webhook.kubeconfig
          cat << EOF >> /etc/kubernetes/webhook.kubeconfig
          apiVersion: v1
          clusters:
          - cluster:
              insecure-skip-tls-verify: true
              server: https://localhost:8443/webhook
            name: webhook
          contexts:
          - context:
              cluster: webhook
              user: webhook
            name: webhook
          current-context: webhook
          kind: Config
          preferences: {}
          users:
          - name: webhook
          EOF

          export API_HOST_IP=$(ip route get 1.1.1.1 | awk '{print $7}')
          export KUBELET_HOST="0.0.0.0"
          export ALLOW_SECURITY_CONTEXT=true
          export ENABLE_CRI=false
          export ENABLE_HOSTPATH_PROVISIONER=true
          export ENABLE_SINGLE_CA_SIGNER=true
          export KUBE_ENABLE_CLUSTER_DNS=false
          export LOG_LEVEL=4
          # We want to use the openstack cloud provider
          export CLOUD_PROVIDER=openstack
          # We want to run a separate cloud-controller-manager for openstack
          export EXTERNAL_CLOUD_PROVIDER=true
          # DO NOT change the location of the cloud-config file. It is important for the old cinder provider to work
          export CLOUD_CONFIG=/etc/kubernetes/cloud-config
          # Specify the OCCM binary
          export EXTERNAL_CLOUD_PROVIDER_BINARY="$PWD/openstack-cloud-controller-manager"
          # set auth options
          export AUTHORIZATION_WEBHOOK_CONFIG_FILE=/etc/kubernetes/webhook.kubeconfig
          export AUTHENTICATION_WEBHOOK_CONFIG_FILE=/etc/kubernetes/webhook.kubeconfig

          # location of where the kubernetes processes log their output
          mkdir -p '{{ k8s_log_dir }}'
          export LOG_DIR='{{ k8s_log_dir }}'
          # We need this for one of the conformance tests
          export ALLOW_PRIVILEGED=true
          # Just kick off all the processes and drop down to the command line
          export ENABLE_DAEMON=true
          if [ -d /mnt/config/openstack ]; then
              export HOSTNAME_OVERRIDE=$(hostname)
          else
              export HOSTNAME_OVERRIDE=$(curl http://169.254.169.254/openstack/latest/meta_data.json | python -c "import sys, json; print json.load(sys.stdin)['name']")
          fi
          export MAX_TIME_FOR_URL_API_SERVER=5
          export AUTHORIZATION_MODE="Node,Webhook,RBAC"

          K8S_INSTALL_SCRIPT='{{ k8s_src_dir }}/hack/local-up-cluster.sh'
          sed -i -e "/kube::util::wait_for_url.*$/,+1d" "$K8S_INSTALL_SCRIPT"

          # -E preserves the current env vars, but we need to special case PATH
          # Must run local-up-cluster.sh under kubernetes root directory
          pushd '{{ k8s_src_dir }}'
          sudo -E PATH=$PATH SHELLOPTS=$SHELLOPTS ./hack/local-up-cluster.sh -O
          popd
          [[ "$OS_AUTH_URL" =~ "v3" ]] && keystone_url=${OS_AUTH_URL} || keystone_url=${OS_AUTH_URL}/v3
          nohup ./k8s-keystone-auth \
                --tls-cert-file /var/run/kubernetes/serving-kube-apiserver.crt \
                --tls-private-key-file /var/run/kubernetes/serving-kube-apiserver.key \
                --keystone-policy-file /etc/kubernetes/policy.json \
                --log-dir=${LOG_DIR} \
                --v=10 \
                --keystone-url ${keystone_url} >"${LOG_DIR}/keystone-auth.log" 2>&1 &

          # set up the config we need for kubectl to work
          '{{ kubectl }}' config set-cluster local --server=https://localhost:6443 --certificate-authority=/var/run/kubernetes/server-ca.crt
          '{{ kubectl }}' config set-credentials myself --client-key=/var/run/kubernetes/client-admin.key --client-certificate=/var/run/kubernetes/client-admin.crt
          '{{ kubectl }}' config set-context local --cluster=local --user=myself
          '{{ kubectl }}' config use-context local
          # Hack for RBAC for all for the new cloud-controller process, we need to do better than this
          # It looks like we need to wait the Kubernetes services get ready before binding roles, so add a retry mechanism here
          timeout 120 bash -c '
              while :
              do
                  {{ kubectl }} create clusterrolebinding --user system:serviceaccount:kube-system:default kube-system-cluster-admin-1 --clusterrole cluster-admin && break
                  sleep 5
              done
          '
          '{{ kubectl }}' create clusterrolebinding --user system:serviceaccount:kube-system:pvl-controller kube-system-cluster-admin-2 --clusterrole cluster-admin
          '{{ kubectl }}' create clusterrolebinding --user system:serviceaccount:kube-system:cloud-node-controller kube-system-cluster-admin-3 --clusterrole cluster-admin
          '{{ kubectl }}' create clusterrolebinding --user system:serviceaccount:kube-system:cloud-controller-manager kube-system-cluster-admin-4 --clusterrole cluster-admin
          '{{ kubectl }}' create clusterrolebinding --user system:serviceaccount:kube-system:shared-informers kube-system-cluster-admin-5 --clusterrole cluster-admin
          '{{ kubectl }}' create clusterrolebinding --user system:kube-controller-manager  kube-system-cluster-admin-6 --clusterrole cluster-admin

          {
              authenticated_info=$(cat <<< '
                  {
                    "apiVersion": "authentication.k8s.io/v1beta1",
                    "kind": "TokenReview",
                    "metadata": {
                        "creationTimestamp": null
                    },
                    "spec": {
                        "token": "'$(openstack token issue -f value -c id)'"
                    }
                  }' | curl -kvs -XPOST -d @- https://localhost:8443/webhook | python -c "import sys, json; print json.load(sys.stdin)"
              )
              base_body=$(cat <<< '
                  {
                      "apiVersion": "authorization.k8s.io/v1beta1",
                      "kind": "SubjectAccessReview",
                      "spec": {
                          "resourceAttributes": {
                              "namespace": "default",
                              "verb": "get",
                              "group": "",
                              "resource": "pods"
                          }
                      }
                  }' |  python -c "import sys, json; print json.load(sys.stdin)"
              )
              update_auth_info=$(echo "
                  import json;
                  s1=$authenticated_info;
                  s2=$base_body;
                  s2['spec']['user']=s1['status']['user']['username'];
                  s2['spec']['group']=s1['status']['user']['groups'];
                  s2['spec']['extra']=s1['status']['user']['extra'];
                  print json.dumps(s2)" | sed 's/^ \+//'
              )
              authorization_body=$(python -c "$update_auth_info")
              allowed=$(echo "$authorization_body" | curl -kvs -XPOST -d @- https://localhost:8443/webhook | python -mjson.tool)
          } > /dev/null 2>&1

          echo "$allowed"
          [[ "$allowed" =~ '"allowed": true' ]] && echo "Testing k8s-keystone-auth sucessfully!"

          # NOTE: k8s+keystone webhook test case need the OS_DOMAIN_NAME env
          export OS_DOMAIN_NAME=Default
          '{{ kubectl }}' config set-credentials openstackuser --auth-provider=openstack
          '{{ kubectl }}' config set-context --cluster=local --user=openstackuser openstackuser@local
          '{{ kubectl }}' config use-context openstackuser@local
          if ! '{{ kubectl }}' get pods; then
              echo "Testing kubernetes+keystone authentication and authorization failed!"
              exit 1
          fi
        executable: /bin/bash
        chdir: '{{ k8s_os_provider_src_dir }}'
      environment: '{{ global_env }}'
