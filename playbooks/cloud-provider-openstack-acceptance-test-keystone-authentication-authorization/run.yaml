- hosts: all
  roles:
    - config-golang
    - install-k8s
    - clone-devstack-gate-to-workspace
    - role: install-devstack
      environment:
        OVERRIDE_ENABLED_SERVICES: 'key,mysql'
  become: yes
  tasks:
    - name: Run keystone authentication and authorization acceptance tests with cloud-provider-openstack
      shell:
        cmd: |
          set -x
          set -e
          set -o pipefail

          # Build cloud-provider-openstack binaries
          BUILD_CMDS=k8s-keystone-auth make build

          apt-get install python-pip -y
          pip install -U python-openstackclient

          # Create cloud-config
          mkdir -p /etc/kubernetes/
          cat << EOF >> /etc/kubernetes/cloud-config
          [Global]
          domain-id = $OS_PROJECT_DOMAIN_ID
          tenant-name = $OS_PROJECT_NAME
          auth-url = $OS_AUTH_URL
          password = $OS_PASSWORD
          username = $OS_USERNAME
          region = $OS_REGION_NAME

          [BlockStorage]
          bs-version = v3
          ignore-volume-az = yes
          EOF

          # Create webhook.kubeconfig
          cat << EOF >> /etc/kubernetes/webhook.kubeconfig
          apiVersion: v1
          clusters:
          - cluster:
              insecure-skip-tls-verify: true
              server: https://localhost:8443/webhook
            name: webhook
          contexts:
          - context:
              cluster: webhook
              user: webhook
            name: webhook
          current-context: webhook
          kind: Config
          preferences: {}
          users:
          - name: webhook
          EOF

          export API_HOST_IP=$(ip route get 1.1.1.1 | awk '{print $7}')
          export KUBELET_HOST="0.0.0.0"
          export ALLOW_SECURITY_CONTEXT=true
          export ENABLE_CRI=false
          export ENABLE_HOSTPATH_PROVISIONER=true
          export ENABLE_SINGLE_CA_SIGNER=true
          export KUBE_ENABLE_CLUSTER_DNS=false
          export LOG_LEVEL=4
          # We want to use the openstack cloud provider
          export CLOUD_PROVIDER=openstack
          # We want to run a separate cloud-controller-manager for openstack
          export EXTERNAL_CLOUD_PROVIDER=true
          # DO NOT change the location of the cloud-config file. It is important for the old cinder provider to work
          export CLOUD_CONFIG=/etc/kubernetes/cloud-config
          # Specify the OCCM binary
          export EXTERNAL_CLOUD_PROVIDER_BINARY="$PWD/openstack-cloud-controller-manager"
          # set auth options
          export AUTHORIZATION_WEBHOOK_CONFIG_FILE=/etc/kubernetes/webhook.kubeconfig
          export AUTHENTICATION_WEBHOOK_CONFIG_FILE=/etc/kubernetes/webhook.kubeconfig

          # location of where the kubernetes processes log their output
          mkdir -p '{{ k8s_log_dir }}'
          export LOG_DIR='{{ k8s_log_dir }}'
          # We need this for one of the conformance tests
          export ALLOW_PRIVILEGED=true
          # Just kick off all the processes and drop down to the command line
          export ENABLE_DAEMON=true
          if [ -d /mnt/config/openstack ]; then
              export HOSTNAME_OVERRIDE=$(hostname)
          else
              export HOSTNAME_OVERRIDE=$(curl http://169.254.169.254/openstack/latest/meta_data.json | python -c "import sys, json; print json.load(sys.stdin)['name']")
          fi
          export MAX_TIME_FOR_URL_API_SERVER=5
          export AUTHORIZATION_MODE="Node,Webhook,RBAC"

          K8S_INSTALL_SCRIPT='{{ k8s_src_dir }}/hack/local-up-cluster.sh'
          sed -i -e "/kube::util::wait_for_url.*$/,+1d" "$K8S_INSTALL_SCRIPT"
          sed -i -e '/{GO_OUT}\/kube-apiserver\".*$/a \      --authorization-webhook-version=v1beta1 \\' "$K8S_INSTALL_SCRIPT"
          sed -i -e '/{GO_OUT}\/kube-apiserver\".*$/a \      --authentication-token-webhook-version=v1beta1 \\' "$K8S_INSTALL_SCRIPT"

          # -E preserves the current env vars, but we need to special case PATH
          # Must run local-up-cluster.sh under kubernetes root directory
          pushd '{{ k8s_src_dir }}'
          sudo -E PATH=$PATH SHELLOPTS=$SHELLOPTS ./hack/local-up-cluster.sh -O
          popd

          # Set up the kubeconfig
          curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          mv ./kubectl /usr/local/bin/kubectl
          mkdir -p {{ ansible_user_dir }}/.kube
          kubefile={{ ansible_user_dir }}/.kube/config
          touch $kubefile
          kubectl config set-cluster local --server=https://localhost:6443 --certificate-authority=/var/run/kubernetes/server-ca.crt --kubeconfig=$kubefile
          kubectl config set-credentials myself --client-key=/var/run/kubernetes/client-admin.key --client-certificate=/var/run/kubernetes/client-admin.crt --kubeconfig=$kubefile
          kubectl config set-context local --cluster=local --user=myself --kubeconfig=$kubefile
          kubectl config use-context local --kubeconfig=$kubefile
          export KUBECONFIG={{ ansible_user_dir }}/.kube/config

          # Create the initial configmaps for k8s-keystone-auth webhook
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: keystone-auth-policy
            namespace: kube-system
          data:
            policies: |
              [
                {
                  "users": {
                    "projects": ["demo"],
                    "roles": ["member"]
                  },
                  "resource_permissions": {
                    "*/pods": ["get", "list", "watch", "create"]
                  }
                }
              ]
          EOF

          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: keystone-sync-policy
            namespace: kube-system
          data:
            syncConfig: |
              role-mappings:
                - keystone-role: member
                  groups: ["member"]
          EOF

          # Start k8s-keystone-auth webhook service
          [[ "$OS_AUTH_URL" =~ "v3" ]] && keystone_url=${OS_AUTH_URL} || keystone_url=${OS_AUTH_URL}/v3
          nohup ./k8s-keystone-auth-amd64 \
                --tls-cert-file /var/run/kubernetes/serving-kube-apiserver.crt \
                --tls-private-key-file /var/run/kubernetes/serving-kube-apiserver.key \
                --policy-configmap-name keystone-auth-policy \
                --sync-configmap-name keystone-sync-policy \
                --log-dir=${LOG_DIR} \
                --v=10 \
                --kubeconfig /var/run/kubernetes/admin.kubeconfig \
                --keystone-url ${keystone_url} >"${LOG_DIR}/keystone-auth.log" 2>&1 &

          kubectl create clusterrolebinding --user system:serviceaccount:kube-system:default kube-system-cluster-admin-1 --clusterrole cluster-admin
          kubectl create clusterrolebinding --user system:serviceaccount:kube-system:pvl-controller kube-system-cluster-admin-2 --clusterrole cluster-admin
          kubectl create clusterrolebinding --user system:serviceaccount:kube-system:cloud-node-controller kube-system-cluster-admin-3 --clusterrole cluster-admin
          kubectl create clusterrolebinding --user system:serviceaccount:kube-system:cloud-controller-manager kube-system-cluster-admin-4 --clusterrole cluster-admin
          kubectl create clusterrolebinding --user system:serviceaccount:kube-system:shared-informers kube-system-cluster-admin-5 --clusterrole cluster-admin
          kubectl create clusterrolebinding --user system:kube-controller-manager kube-system-cluster-admin-6 --clusterrole cluster-admin
        executable: /bin/bash
        chdir: '{{ k8s_os_provider_src_dir }}'
      environment: '{{ global_env }}'

    - name: Add openstack user context
      blockinfile:
        path: "{{ ansible_user_dir }}/.kube/config"
        insertafter: "users:"
        block: |
          - name: openstactokenkuser
            user:
              exec:
                command: /bin/bash
                apiVersion: client.authentication.k8s.io/v1alpha1
                args:
                - -c
                - >
                  if [ -z ${OS_TOKEN} ]; then
                      echo 'Error: Missing OpenStack credential from environment variable $OS_TOKEN' > /dev/stderr
                      exit 1
                  else
                      echo '{ "apiVersion": "client.authentication.k8s.io/v1alpha1", "kind": "ExecCredential", "status": { "token": "'"${OS_TOKEN}"'"}}'
                  fi

    - name: Run e2e tests for k8s-keystone-auth webhook
      shell:
        executable: /bin/bash
        chdir: '{{ k8s_os_provider_src_dir }}'
        cmd: |
          source /opt/stack/new/devstack/openrc demo demo > /dev/null

          # The default Keystone token expiration time in devstack is 3 hours.
          token=$(openstack token issue -f yaml -c id | awk '{print $2}')
          export OS_TOKEN=$token
          export KUBECONFIG={{ ansible_user_dir }}/.kube/config
          kubectl config set-context openstack --cluster local --user openstactokenkuser

          OS_TOKEN=$token OS_CONTEXT_NAME=openstack AUTH_POLICY_CONFIGMAP=keystone-auth-policy ROLE_MAPPING_CONFIGMAP=keystone-sync-policy tests/e2e/k8s-keystone-auth/test-authz.sh
