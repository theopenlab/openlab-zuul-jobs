- hosts: all
  tasks:
    - name: Clean the existing
      become: yes
      shell:
        cmd: |
          apt-get -y --purge remove postgresql libpq-dev libpq5 \
            postgresql-client-common postgresql-common
          rm -rf /var/lib/postgresql
      args:
        executable: /bin/bash

    - name: Setting PG upstream repo
      become: yes
      shell:
        cmd: |
          source /etc/lsb-release ;
          echo "deb http://apt.postgresql.org/pub/repos/apt/ $DISTRIB_CODENAME-pgdg main {{ global_env.PGVERSION }}" > pgdg.list
          mv pgdg.list /etc/apt/sources.list.d/
          wget --quiet -O - https://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc | apt-key add -
      args:
        executable: /bin/bash
      environment: '{{ global_env }}'

    - name: Install deps
      become: yes
      shell:
        cmd: |
          apt-get -q update \
              && apt-get -q install -y --no-install-recommends \
                  build-essential \
                  ccache \
                  libevent-dev \
                  libapr1-dev \
                  libffi-dev \
                  libssl-dev \
                  git \
                  python-pip \
                  python-dev \
                  gcc \
                  libsodium-dev \
                  libcurl4-openssl-dev \
                  libzstd1-dev \
                  libldap2-dev \
                  flex \
                  libbz2-dev \
                  bison \
                  libpq-dev \
                  postgresql-server-dev-all \
                  postgresql-common \
                  libyaml-dev \
                  zlib1g \
                  zlib1g-dev \
                  sudo \
                  vim \
              && apt-get clean \
              && rm -rf /var/lib/apt/lists/*
          apt-get update
          apt-get install zlib1g zlib1g-dev bzip2 libbz2-dev readline-common libreadline-dev bison libgmp-dev \
             libmpfr-dev libmpc-dev -y

    - name: Install perlbrew
      shell:
        cmd: |
          curl -L http://xrl.us/perlbrewinstall | bash
      args:
        executable: /bin/bash

    - name: Install perl {{ global_env.PERL_VERSION }}
      shell:
        cmd: |
          source ~/perl5/perlbrew/etc/bashrc
          if [[ {{ global_env.ARCH }} =~ arm64* ]] && [[ {{ global_env.PERL_VERSION }} =~ ^([0-9]+\.){1}([0-9]+)$ ]]; then
              INSTALL_VERSION={{ global_env.PERL_VERSION }}.0 ;
              perlbrew install -j 4 $INSTALL_VERSION -n ;
              perlbrew switch $INSTALL_VERSION ;

          else
              perlbrew install -j 4 {{ global_env.PERL_VERSION }}.3 -n
              perlbrew switch {{ global_env.PERL_VERSION }}.3
          fi
          perl --version ;
          echo "y" | perlbrew install-cpanm ;
      args:
        executable: /bin/bash
      environment: '{{ global_env }}'

    - name: Install test deps
      become: yes
      shell:
        cmd: |
          apt-get install -y \
            postgresql-{{ global_env.PGVERSION }} \
            postgresql-client-{{ global_env.PGVERSION }} \
            postgresql-{{ global_env.PGVERSION }}-pgtap \
            postgresql-server-dev-{{ global_env.PGVERSION }} \
            postgresql-server-dev-all \
            postgresql-plperl-{{ global_env.PGVERSION }} \
            debhelper fakeroot libdbd-pg-perl \
            libtap-parser-sourcehandler-pgtap-perl
      args:
        executable: /bin/bash
      environment: '{{ global_env }}'

    - name: Install perl modules
      shell:
        cmd: |
          source ~/perl5/perlbrew/etc/bashrc
          if [[ {{ global_env.ARCH }} =~ arm64* ]] && [[ {{ global_env.PERL_VERSION }} =~ ^([0-9]+\.){1}([0-9]+)$ ]]; then
              INSTALL_VERSION={{ global_env.PERL_VERSION }}.0 ;
              perlbrew switch $INSTALL_VERSION ;
          else
              perlbrew switch {{ global_env.PERL_VERSION }}.3
          fi
          cpanm --quiet --installdeps --notest .
      args:
        executable: /bin/bash
        chdir: '{{ zuul.project.src_dir }}'
      environment: '{{ global_env }}'

    - name: Set test env vars
      set_fact:
        test_env:
          PATH: '/usr/lib/postgresql/{{ global_env.PGVERSION }}/bin:{{ ansible_env.PATH }}'
      environment: '{{ global_env }}'
      no_log: yes

    - name: Merge env vars into global env
      set_fact:
        global_env: '{{ global_env | combine(test_env) }}'
      no_log: yes
