- hosts: all
  become: yes
  roles:
    - clone-devstack-gate-to-workspace
    - create-devstack-local-conf
    - install-devstack
    - config-packer
  tasks:
    - name: Create image by Packer
      shell:
        cmd: |
          set -ex
          set -o pipefail
          cat << EOF >> welcome.txt
          WELCOME TO PACKER!
          EOF
          image_name="packer-cirros-$(date +%s)"
          network=$(openstack network show private -f value -c id)
          src_img_name=$(openstack image list -f value -c Name | grep -Eo "cirros-.*" | grep -v ramdisk | grep -v kernel)
          cat << EOF >> os-template.json
          {
              "builders": [
                  {
                      "type": "openstack",
                      "flavor": "m1.tiny",
                      "image_name": "$image_name",
                      "source_image_name": "$src_img_name",
                      "ssh_username": "cirros",
                      "networks": ["$network"],
                      "floating_ip_pool": "public"
                  }
              ],
              "provisioners": [
                  {
                      "type": "file",
                      "source": "./welcome.txt",
                      "destination": "/home/cirros/"
                  },
                  {
                      "type": "shell",
                      "inline":[
                          "ls -al /home/cirros",
                          "cat /home/cirros/welcome.txt"
                      ]
                  }
              ]
          }
          EOF
          # NOTE: "--project" option is not supported for "openstack security group list" command
          # in M and N release, so we have to filter "default" sg of current project by project id.
          project_id=$(openstack token issue -f value -c project_id)
          sg_id=$(openstack security group list | grep default | grep $project_id | head -n 1 | awk '{print $2}')
          # NOTE: openstackclient CLI options are not compatible in Mitaka and other release
          if [ "{{ global_env.OS_BRANCH }}" == "stable/mitaka" ]; then
              openstack security group rule create --proto tcp --dst-port 22 $sg_id
              export OS_DOMAIN_ID=default
          else
              openstack security group rule create --ingress --protocol tcp --dst-port 22 $sg_id
          fi
          packer validate os-template.json
          packer build -color=false os-template.json
          openstack image show $image_name
          openstack image delete $image_name
        executable: /bin/bash
      environment: '{{ global_env }}'
