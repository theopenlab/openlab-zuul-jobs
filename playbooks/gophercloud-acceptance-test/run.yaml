- hosts: all
  become: yes
  tasks:

    - name: Ensure legacy workspace directory
      file:
        path: '{{ ansible_user_dir }}/workspace'
        state: directory

    - shell:
        cmd: |
          set -e
          set -x
          cat > clonemap.yaml << EOF
          clonemap:
            - name: openstack-infra/devstack-gate
              dest: devstack-gate
          EOF
          /usr/zuul-env/bin/zuul-cloner -m clonemap.yaml --cache-dir /opt/git \
              git://github.com \
              openstack-infra/devstack-gate
        executable: /bin/bash
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'

    - shell:
        cmd: |
          set -e
          set -x
          cat << 'EOF' >>"/tmp/dg-local.conf"
          [[local|localrc]]
          # pass

          EOF
        executable: /bin/bash
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'

    - shell:
        cmd: |
          set -e
          set -x
          export PYTHONUNBUFFERED=true
          export GIT_BASE=https://github.com
          cp devstack-gate/devstack-vm-gate-wrap.sh ./safe-devstack-vm-gate-wrap.sh
          ./safe-devstack-vm-gate-wrap.sh
        executable: /bin/bash
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'

    - shell:
        cmd: |
          set -e
          set -x
          wget -c https://storage.googleapis.com/golang/go1.9.linux-amd64.tar.gz
          sudo tar -C /usr/local/ -xvzf go1.9.linux-amd64.tar.gz

          # Install env variables
          export GOPATH={{ ansible_user_dir }}
          mkdir -p $GOPATH/{bin,pkg}
          export PATH=$PATH:$GOPATH/bin:/usr/local/go/bin
          export GOBIN=$GOPATH/bin

          # Prep the testing environment by creating the required testing resources and environment variables
          pushd /opt/stack/new/devstack
          source openrc admin admin
          nova flavor-create m1.acctest 99 512 5 1 --ephemeral 10
          nova flavor-create m1.resize 98 512 6 1 --ephemeral 10
          _NETWORK_ID=$(openstack network show private -c id -f value)
          _EXTGW_ID=$(openstack network show public -c id -f value)
          _IMAGE=$(openstack image list | grep -i cirros | head -n 1)
          _IMAGE_ID=$(echo $_IMAGE | awk -F\| '{print $2}' | tr -d ' ')
          _IMAGE_NAME=$(echo $_IMAGE | awk -F\| '{print $3}' | tr -d ' ')
          echo export OS_IMAGE_NAME="$_IMAGE_NAME" >> openrc
          echo export OS_IMAGE_ID="$_IMAGE_ID" >> openrc
          echo export OS_NETWORK_ID=$_NETWORK_ID >> openrc
          echo export OS_EXTGW_ID=$_EXTGW_ID >> openrc
          echo export OS_POOL_NAME="public" >> openrc
          echo export OS_FLAVOR_ID=99 >> openrc
          echo export OS_FLAVOR_ID_RESIZE=98 >> openrc
          echo export OS_SHARE_NETWORK_ID=foobar >> openrc
          echo export OS_DOMAIN_NAME=Default >> openrc
          source openrc admin admin
          popd

          go get ./... || true
          # Only enable these successful test cases
          go test -v -tags "fixtures acceptance" ./acceptance/openstack/identity/v3/
          go test -v -tags "fixtures acceptance" ./acceptance/openstack/networking/v2/
          go test -v -tags "fixtures acceptance" ./acceptance/openstack/blockstorage/v2/
          go test -v -tags "fixtures acceptance" -run "SecGroup|Flavor" ./acceptance/openstack/compute/v2/
          # To enable more after the fix of https://github.com/gophercloud/gophercloud/issues/608
          # go test -v -tags "fixtures acceptance" ./acceptance/openstack/imageservice/v2/
          # go test -v -tags "fixtures acceptance" ./acceptance/openstack/identity/v2/
          # go test -v -tags "fixtures acceptance" ./acceptance/openstack/compute/v2/
        executable: /bin/bash
        chdir: '{{ zuul.project.src_dir }}'
      environment: '{{ zuul | zuul_legacy_vars }}'
