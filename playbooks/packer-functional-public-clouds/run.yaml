- hosts: all
  become: yes
  roles:
    - config-packer
    - export-cloud-openrc
  tasks:
    - name: Create image by Packer
      shell:
        cmd: |
          set -ex
          set -o pipefail
          pip install python-openstackclient
          pip install python-glanceclient==2.11.0
          flavor=$(openstack flavor list -f value -c ID -c RAM -c VCPUs --sort-column RAM --sort-column VCPUs | head -n 1 | awk '{print $1}')
          network=$(openstack network show openlab-jobs-net -f value -c id)
          src_img_name=$(openstack image list |grep -Eo "cirros.*0.4.0.*-disk")
          image_name="packer-cirros-openstack-$(date +%s)"

          cat << EOF >> welcome.txt
          WELCOME TO PACKER!
          EOF

          cat << EOF >> os-template.json
          {
              "builders": [
                  {
                      "type": "openstack",
                      "flavor": "$flavor",
                      "image_name": "$image_name",
                      "source_image_name": "$src_img_name",
                      "ssh_username": "cirros",
                      "networks": ["$network"],
                      "floating_ip_pool": "admin_external_net"
                  }
              ],
              "provisioners": [
                  {
                      "type": "file",
                      "source": "./welcome.txt",
                      "destination": "/home/cirros/"
                  },
                  {
                      "type": "shell",
                      "inline":[
                          "ls -al /home/cirros",
                          "cat /home/cirros/welcome.txt"
                      ]
                  }
              ]
          }
          EOF
          # NOTE: Have to specify AZ in huaweicloud
          if [ '{{ cloud_name }}' == 'huaweicloud' ]; then
              sed -i '5i\      "availability_zone": "cn-east-1a",' packer-template.json
          fi
          packer validate os-template.json
          packer build -color=false os-template.json
          openstack image show $image_name
          openstack image delete $image_name
          # NOTE: in public clouds, it will leave legacy volumes with same name of image, need to clean manually
          openstack volume delete $image_name --purge
        executable: /bin/bash
      environment: '{{ global_env }}'
