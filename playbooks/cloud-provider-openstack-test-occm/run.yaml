- hosts: all
  become: yes

  vars:
    registry: swr.ap-southeast-3.myhuaweicloud.com
    registry_account: openlab

  roles:
    - role: config-golang
      vars:
        go_version: '1.15.11'
    - install-docker
    - install-devstack-cpo

  tasks:
    - name: Install packages
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - jq
          - httpie

    - name: Login SWR
      shell:
        executable: /bin/bash
        cmd: |
          docker login -u ap-southeast-3@{{ swr.ak }} -p {{ swr.sk }} {{ registry }}
          docker pull {{ registry }}/{{ registry_account }}/alpine:3.11
          docker tag {{ registry }}/{{ registry_account }}/alpine:3.11 alpine:3.11
      no_log: yes

    - name: Build and upload openstack-cloud-controller-manager image
      environment: '{{ global_env }}'
      shell:
        executable: /bin/bash
        chdir: '{{ cpo_src_dir }}'
        cmd: |
          REGISTRY={{ registry }}/{{ registry_account }} \
          VERSION={{ zuul.change }} \
          IMAGE_NAMES=openstack-cloud-controller-manager \
          make upload-image-amd64

    - name: Create VM and install k3s
      environment: '{{ global_env }}'
      shell:
        executable: /bin/bash
        cmd: |
          set -ex

          # To avoid the warning msg: "CryptographyDeprecationWarning: int_from_bytes is deprecated, use int.from_bytes instead"
          python3 -m pip install cryptography==3.3.2

          cd ${devstack_workdir}

          # Create Ubuntu Bionic image
          set +x; source openrc admin admin > /dev/null; set -x
          image_url="https://cloud-images.ubuntu.com/releases/focal/release/ubuntu-20.04-server-cloudimg-amd64.img"
          curl -sSLO $image_url
          image_id=$(openstack image create ubuntu-focal --container-format bare --disk-format qcow2 --public --file ubuntu-20.04-server-cloudimg-amd64.img -f value -c id)

          # Create resources for demo tenant
          set +x; source openrc demo demo > /dev/null; set -x
          test -e {{ ansible_user_dir }}/.ssh/id_rsa || ssh-keygen -t rsa -b 4096 -N "" -f {{ ansible_user_dir }}/.ssh/id_rsa
          openstack keypair create --public-key {{ ansible_user_dir }}/.ssh/id_rsa.pub k3s_keypair
          sg_name=k3s_sg
          openstack security group create $sg_name
          openstack security group rule create --proto icmp $sg_name
          openstack security group rule create --protocol tcp --dst-port 1:65535 $sg_name
          openstack security group rule create --protocol udp --dst-port 1:65535 $sg_name
          openstack subnet set private-subnet --dns-nameserver 8.8.8.8
          port_id=$(openstack port create k3s --network private --security-group $sg_name -f value -c id)
          fip=$(openstack floating ip create public -c floating_ip_address -f value)
          openstack floating ip set $fip --port $port_id

          # Get k3s release based on the CPO branch.
          branch={{ zuul.branch }}
          if [[ "$branch" = "master" ]]; then
            k3s_release=$(curl -s "https://api.github.com/repos/k3s-io/k3s/tags" | jq -r '.[0].name')
          else
            # release-1.20 --> 1.20
            k8s_minor=${branch##*-}
            # 1.20 --> v1.20.x+k3s1
            k3s_release=$(curl -s "https://api.github.com/repos/k3s-io/k3s/tags" | jq -r '.[].name' | grep -E "^v${k8s_minor}.[0-9]\++k3s1$" | awk 'NR==1 {print}')
          fi

          # Prepare user data file
          cat <<EOF > ${devstack_workdir}/init_k3s.yaml
          #cloud-config
          manage_etc_hosts: "localhost"
          runcmd:
            - mkdir -p /var/lib/rancher/k3s/agent/images/
            - curl -sSL https://github.com/k3s-io/k3s/releases/download/${k3s_release}/k3s-airgap-images-amd64.tar -o /var/lib/rancher/k3s/agent/images/k3s-airgap-images.tar
            - curl -sSL https://github.com/k3s-io/k3s/releases/download/${k3s_release}/k3s -o /usr/local/bin/k3s
            - curl -sSL https://get.k3s.io -o /var/lib/rancher/k3s/install.sh
            - chmod u+x /var/lib/rancher/k3s/install.sh /usr/local/bin/k3s
            - INSTALL_K3S_SKIP_DOWNLOAD=true /var/lib/rancher/k3s/install.sh --disable traefik --disable metrics-server --disable servicelb --disable-cloud-controller --kubelet-arg="cloud-provider=external" --tls-san $fip
          EOF

          # Create k3s VM
          openstack server create k3s --image $image_id --flavor ds2G --key-name k3s_keypair --nic port-id=$port_id --config-drive true --user-data ${devstack_workdir}/init_k3s.yaml --wait

    - name: Get floating IP
      environment: '{{ global_env }}'
      shell:
        executable: /bin/bash
        cmd: |
          set +x; source ${devstack_workdir}/openrc demo demo > /dev/null
          openstack floating ip list --port k3s -c "Floating IP Address" -f value
      register: fip_ret

    - name: Set fact for k3s VM floating IP
      set_fact:
        k3s_fip: "{{ fip_ret.stdout }}"

    - name: Wait for ssh ready for k3s VM
      wait_for: port=22 host={{ k3s_fip }} search_regex=OpenSSH timeout=500 delay=5

    - name: Wait until k3s installation is finished
      shell:
        executable: /bin/bash
        cmd: |
          ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i {{ ansible_user_dir }}/.ssh/id_rsa ubuntu@{{ k3s_fip }} sudo chmod 777 /etc/rancher/k3s/k3s.yaml
      register: result
      until: result.rc == 0
      retries: 100
      delay: 5

    - name: Prepare kubectl and kubeconfig file
      shell:
        executable: /bin/bash
        cmd: |
          set -ex
          mkdir -p {{ ansible_user_dir }}/.kube
          scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i {{ ansible_user_dir }}/.ssh/id_rsa ubuntu@{{ k3s_fip }}:/etc/rancher/k3s/k3s.yaml {{ ansible_user_dir }}/.kube/config
          curl -sLO# https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
          chmod +x ./kubectl; sudo mv ./kubectl /usr/local/bin/kubectl
          kubectl config set-cluster default --server=https://{{ k3s_fip }}:6443 --kubeconfig {{ ansible_user_dir }}/.kube/config

    - name: Wait for node ready
      shell:
        executable: /bin/bash
        cmd: |
          kubectl --kubeconfig {{ ansible_user_dir }}/.kube/config get node
      register: result
      until: '" Ready "  in result.stdout'
      retries: 5
      delay: 10

    - name: Prepare openstack-cloud-controller-manager config
      environment: "{{ global_env }}"
      shell:
        executable: /bin/bash
        cmd: |
          set -ex

          set +x; source ${devstack_workdir}/openrc admin admin > /dev/null; set -x
          tenant_id=$(openstack project show demo -c id -f value)
          sudnet_id=$(openstack subnet show private-subnet -c id -f value)
          external_network_id=$(openstack network list --external -c ID -f value)

          set +x; source ${devstack_workdir}/openrc demo demo > /dev/null; set -x
          cat <<EOF > {{ ansible_user_dir }}/cloud.conf
          [Global]
          auth-url=${OS_AUTH_URL}/v3
          username=${OS_USERNAME}
          password=${OS_PASSWORD}
          region=${OS_REGION_NAME}
          tenant-id=$tenant_id
          domain-id=default

          [LoadBalancer]
          use-octavia=true
          subnet-id=$sudnet_id
          floating-network-id=$external_network_id

          [BlockStorage]
          bs-version=v2
          EOF

          kubectl --kubeconfig {{ ansible_user_dir }}/.kube/config create secret -n kube-system generic cloud-config --from-file={{ ansible_user_dir }}/cloud.conf

    - name: Create secret for pulling the image
      environment:
        KUBECONFIG: "{{ ansible_user_dir }}/.kube/config"
      no_log: yes
      shell:
        executable: /bin/bash
        cmd: |
          kubectl -n kube-system get secret openlab || kubectl -n kube-system create secret docker-registry openlab --docker-server={{ registry }} --docker-username=ap-southeast-3@{{ swr.ak }} --docker-password={{ swr.sk }}

    - name: Deploy openstack-cloud-controller-manager
      environment:
        KUBECONFIG: "{{ ansible_user_dir }}/.kube/config"
      shell:
        executable: /bin/bash
        cmd: |
          set -x

          cat <<EOF | kubectl apply -f -
          ---
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: cloud-controller-manager
            namespace: kube-system
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: system:cloud-controller-manager
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: cluster-admin
          subjects:
          - kind: ServiceAccount
            name: cloud-controller-manager
            namespace: kube-system
          ---
          apiVersion: apps/v1
          kind: DaemonSet
          metadata:
            name: openstack-cloud-controller-manager
            namespace: kube-system
            labels:
              k8s-app: openstack-cloud-controller-manager
          spec:
            selector:
              matchLabels:
                k8s-app: openstack-cloud-controller-manager
            updateStrategy:
              type: RollingUpdate
            template:
              metadata:
                labels:
                  k8s-app: openstack-cloud-controller-manager
              spec:
                tolerations:
                - key: node.cloudprovider.kubernetes.io/uninitialized
                  value: "true"
                  effect: NoSchedule
                - key: node-role.kubernetes.io/master
                  effect: NoSchedule
                serviceAccountName: cloud-controller-manager
                imagePullSecrets:
                - name: openlab
                containers:
                  - name: openstack-cloud-controller-manager
                    image: {{ registry }}/{{ registry_account }}/openstack-cloud-controller-manager-amd64:{{ zuul.change }}
                    args:
                      - /bin/openstack-cloud-controller-manager
                      - --v=4
                      - --cloud-config=/etc/config/cloud.conf
                      - --cloud-provider=openstack
                      - --use-service-account-credentials=true
                      - --bind-address=127.0.0.1
                    volumeMounts:
                      - mountPath: /etc/config
                        name: cloud-config-volume
                        readOnly: true
                hostNetwork: true
                volumes:
                - name: cloud-config-volume
                  secret:
                    secretName: cloud-config
          EOF

    - name: Wait for openstack-cloud-controller-manager up and running
      environment:
        KUBECONFIG: "{{ ansible_user_dir }}/.kube/config"
      shell:
        executable: /bin/bash
        cmd: |
          kubectl -n kube-system get pod | grep openstack-cloud-controller-manager | grep Running
      register: check_occm
      until: check_occm.rc == 0
      retries: 24
      delay: 5
      ignore_errors: yes

    - name: Gather additional evidence if openstack-cloud-controller-manager failed to come up
      environment:
        KUBECONFIG: "{{ ansible_user_dir }}/.kube/config"
      when: check_occm.failed
      block:
        - name: Describe failed openstack-cloud-controller-manager
          shell:
            executable: /bin/bash
            cmd: |
              kubectl -n kube-system describe daemonset openstack-cloud-controller-manager
          register: describe_occm
          changed_when: false

        - name: Log failed openstack-cloud-controller-manager daemonset
          debug:
            var: describe_occm.stdout_lines

        - name: &failmsg Stop due to prior failure of openstack-cloud-controller-manager
          fail:
            msg: *failmsg

    - name: Run functional tests for openstack-cloud-controller-manager
      shell:
        executable: /bin/bash
        chdir: '{{ cpo_src_dir }}'
        cmd: KUBECONFIG={{ ansible_user_dir }}/.kube/config GATEWAY_IP=172.24.5.1 bash tests/e2e/cloudprovider/test-lb-service.sh
